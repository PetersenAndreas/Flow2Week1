/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

/**
 *
 * @author andre
 */
@Entity
public class Customer implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long Cid;
    private String firstName;
    private String lastName;
    //Exercise 2
    //@OneToOne - There came an ADDRESS_ID in the customer column(F-key)
    //
    //@OneToOne //@OneToOne(mappedBy = "address") was put on in the address class and it created a private Customer customer; also in address class.
    //This is because that we now have an connection between the Address and the Customer, and the other way around.
    //The Database haven't change since the before OneToOne statement, and thus is the same.
    //private Address address;  
    //
    //Exercise 3
    //@JoinColumn(name="id") 
    //@OneToMany(cascade=CascadeType.PERSIST) //This is what have been generated(I have added the cascade myself)
    //It creates a relation table, so we have three tables in total, instead of the previous two.
    //This is to make a workaround so we easily can have a many-to-many relation.
    //Had to rename the private long ID to Cid for customer id and did the same in the address class so the id is now Aid for address ID
    //
    //Exercise 4
    //@OneToMany(mappedBy = "customer", cascade=CascadeType.PERSIST)//This is what has been generated by the wizard. It also made a many-to-one connection in the Address class for the Customer
    //The mappedby = customer specifies that the private Customer customer files in the Address class owns the relationship.
    //There has now been added a "CUSTOMER_CID" to the database which I guess is our f-key.
    //This needs to be persisted(I have added this to the OneToMany clause myself) and then we will have to set the customer in the address 
    //as both classes need to know the same customer and addresses. 
    //
    //Exercise 5
    //How can we implement ManyToMany relationships in an OO-language like Java?
    // - We can implement a many-to-many relation by making lists of objects, just as we did in the above assignments where we sent the adresses and the customers as lists to eachother.
    //How can we implement ManyToMany relationships in a Relational Database?
    // - You make a relation table where you take two p-keys and link them togehter, so you have a table inbetween two tables.

    
    private List<Address> addresses = new ArrayList();

    public Customer() {
    }

    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    public Long getId() {
        return Cid;
    }

    public void setId(Long id) {
        this.Cid = id;
    }
    
    public void addAddress(Address address) {
        addresses.add(address);
    }
    
    
    
}
